=================================
    EF Core
=================================

Entity Framework Core (EF Core) is an object-relational mapper (ORM).

An ORM provides a layer between the domain model that you implement in code and a database.

EF Core is a data access API that allows you to interact with the database by using .NET plain old Common Runtime Language (CLR) objects (*POCOs) and the strongly typed Language Integrated Query (LINQ) syntax.

DbContext is a special class that represents a unit of work.
DbContext provides methods that you can use to configure options, connection strings, logging, and the model that's used to map your domain to the database.

The EF Core Provider translates object graph changes to SQL.
    The database provider:

    - Is a plug-in library designed for a specific database engine, such as SQL Server, Azure Cosmos DB, or PostgreSQL.
    - Translates method calls and LINQ queries to the database's native SQL dialect.
    - Extends EF Core to enable functionality that's unique to the database engine.


Manage database schemas
=================================
EF Core provides two primary ways of keeping your EF Core model and database schema in sync:
    1. Migrations (model as source of truth)
    2. Reverse engineering (database as source of truth)

1. Migrations
The EF Core migrations feature provides a way to track and update the database schema to keep it in sync with the application's data model while preserving existing data in the database.
    - Create the initial database from your model classes.
    - Update the database when your model changes (e.g., you add a new property or a new class).
    - Keep track of history, so you can roll back or redo changes if needed.

After a new migration is generated, it can be applied to a database in various ways. EF Core records all applied migrations in a special history table. The history table keeps a record of which migrations were applied.

2. Reverse engineering
everse engineering is the process of scaffolding entity model classes and a DbContext class based on a database schema.


*It refers to simple classes that don’t depend on any specific framework base classes, attributes, or behaviors — just clean, minimal C# objects



Entity Framework Core Setup Guide
=================================

1. Install EF Core CLI Tools (once per machine)
-----------------------------------------------------
Run this command to install the EF Core CLI globally:

    dotnet tool install --global dotnet-ef

This enables the use of the 'dotnet ef' command for migrations and database updates.

2. Install Required NuGet Packages (per project)
-----------------------------------------------------
In your project directory, run:

    dotnet add package Microsoft.EntityFrameworkCore
    dotnet add package Microsoft.EntityFrameworkCore.SqlServer
    dotnet add package Microsoft.EntityFrameworkCore.Design

- Microsoft.EntityFrameworkCore: Core EF functionality
- Microsoft.EntityFrameworkCore.SqlServer: SQL Server support
- Microsoft.EntityFrameworkCore.Design: Required for migrations and tooling

3. Create Your Model Classes
-----------------------------------------------------
Create simple C# classes to represent your data, for example:

    public class Pizza
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }

4. Create a DbContext Class
-----------------------------------------------------
Create a class that inherits from DbContext:

    using Microsoft.EntityFrameworkCore;
    
    public class PizzaContext : DbContext
    {
        public PizzaContext(DbContextOptions<PizzaContext> options) : base(options) { }

        public DbSet<Pizza> Pizzas => Set<Pizza>();
        ... // Add DBsets for each table
    }

5. Configure the Database Connection
-----------------------------------------------------
In Program.cs (or Startup.cs), add:

    builder.Services.AddDbContext<PizzaContext>(options =>
        options.UseSqlServer("your-connection-string-here"));

What is a Connection String?
    It tells EF how to connect to the database. Example for local SQL Server:
    Server=(localdb)\mssqllocaldb;Database=PizzaDb;Trusted_Connection=True;

    You can also place it in appsettings.json.

    Always store your connection strings securely. For local development, use `Secret Manager`. For production deployments, consider using a service like `Azure Key Vault`.

6. Create a Migration
-----------------------------------------------------
Run the following to create the initial database schema:

    dotnet ef migrations add InitialCreate --context `DerivedDbContext`

This creates a Migrations folder with code that defines your schema.
    * if migration fails -> EF Core CLI needs a reliable way to create an instance of your `DbContext` without running your application code (like `Program.cs`).
    Implementing `IDesignTimeDbContextFactory<T>` provides exactly that — it's like a special constructor just for dotnet ef.


7. Apply the Migration to the Database
-----------------------------------------------------
Run:

    dotnet ef database update

This applies the migration and creates the actual database.


Updating an Existing Migration (after model changes)
==================================================================
If you make changes to your model classes (e.g., add a property or a new class), follow these steps:

1. Make your changes in the model or DbContext.

2. Add a new migration to capture the changes:

       dotnet ef migrations add AddNewFieldsOrTables --context DerivedDbContext

   Replace "AddNewFieldsOrTables" with a descriptive name.

3. Apply the updated migration to the database:

       dotnet ef database update

This will alter the database schema to match the updated model.


Reverse Engineer a Database with EF Core (Scaffold)
========================================================

Run the scaffold command
    dotnet ef dbcontext scaffold "Your_Connection_String" Microsoft.EntityFrameworkCore.SqlServer -o Models

    - "Data Source=Promotions/Promotions.db" – SQLite connection string.
    - Microsoft.EntityFrameworkCore.Sqlite – EF Core provider for SQLite.
    - --context-dir Data – puts the generated DbContext in a Data folder.
    - --output-dir Models – puts all entity classes in a Models folder.

    Optional flags
    - --force – overwrite existing generated files.
    - --no-pluralize – disable pluralizing table names in class generation.
    - --use-database-names – keep table/column names exactly as in DB.

Result: EF will generate:
    - YourDbContext.cs – manages database access.
    - Entity classes for each table in the DB.


ONE-TO-MANY RELATIONSHIP
=================================
- One Author can write many Books.
- Each Book is written by one Author.

Model Classes:

    public class Author
    {
        public int Id { get; set; }
        public string Name { get; set; }

        // Navigation property: lets you access the books written by this author
        public ICollection<Book> Books { get; set; } = new List<Book>();
    }

    public class Book
    {
        public int Id { get; set; }
        public string Title { get; set; }

        public int AuthorId { get; set; }       // Foreign key
        
        // Navigation property: lets you access the author of this book
        public Author Author { get; set; }      // navigation property
    }

EF Core will automatically detect this relationship and create a foreign key in the 'Books' table that points to 'Authors'.


MANY-TO-MANY RELATIONSHIP
=================================
Example:
- One Student can enroll in many Courses.
- One Course can have many Students.

Model Classes :

    public class Student
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public ICollection<Course> Courses { get; set; } = new List<Course>();
    }

    public class Course
    {
        public int Id { get; set; }
        public string Title { get; set; }
        public ICollection<Student> Students { get; set; } = new List<Student>();
    }

EF Core will automatically create a join table (e.g., "CourseStudent") with two foreign keys:
    - StudentId
    - CourseId
    
    No need to define the join table manually unless you want to add extra data to it.


* Navigation property - A property that points to another related entity
e.g
    A Book object, you can do: 
        Console.WriteLine(book.Author.Name);
    An Author object:
        foreach (var book in author.Books)
        {
            Console.WriteLine(book.Title);
        }
* A foreign key - a field in one table that links to the primary key of another table.
It’s used to define and enforce a relationship between two tables.
    In EF Core - Helps EF understand how to join tables when querying

* join table (also called a link table, junction table, or bridge table) stores which items are linked together.
    Table: Students
    - Id
    - Name

    Table: Courses
    - Id
    - Title

    Table: CourseStudent  (JOIN TABLE)
    - StudentId
    - CourseId
        StudentId	CourseId
            1	    10
            1	    11
            2	    10

* Composite key - In Entity Framework Core is a primary key made up of more than one column (or property)
    sometimes a single column isn’t enough to uniquely identify a row in a table. So you combine two or more columns to form a unique key.

    e.g
        public class Enrollment
        {
            public int StudentId { get; set; }
            public int CourseId { get; set; }

            public DateTime EnrolledAt { get; set; }

            public Student Student { get; set; }
            public Course Course { get; set; }
        }
        // Here, a student can enroll in many courses, and a course can have many students — but each (StudentId, CourseId) pair should appear only once.

    Define a composite key with Fluent API:
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Enrollment>()
                .HasKey(e => new { e.StudentId, e.CourseId });
        }


Fluent API vs Data Annotations
=================================
    In Entity Framework Core, both Data Annotations and the Fluent API are 
    ways to configure how your C# classes map to database tables.

    1. Data Annotations (a.k.a. Mapping Attributes)
        - Simple attributes you place directly on your class or property
        - Easy to use for basic configuration
        - Limited to common scenarios

    e.g
        using System.ComponentModel.DataAnnotations;
        using System.ComponentModel.DataAnnotations.Schema;

        public class Book
        {
            [Key]
            public int Id { get; set; }

            [Required]
            [MaxLength(100)]
            public string Title { get; set; }

            [ForeignKey("Author")]
            public int AuthorId { get; set; }

            public Author Author { get; set; }
        }

        2. Fluent API (ModelBuilder)
            - Configuration is done in code inside OnModelCreating in your DbContext
            - More powerful and flexible
            - Better for complex mappings (composite keys, many-to-many with extra fields, shadow properties, etc.)
            - Keeps your entity classes clean

        e.g
            protected override void OnModelCreating(ModelBuilder modelBuilder)
            {
                modelBuilder.Entity<Book>(entity =>
                {
                    entity.HasKey(b => b.Id);

                    entity.Property(b => b.Title)
                        .IsRequired()
                        .HasMaxLength(100);

                    entity.HasOne(b => b.Author)
                        .WithMany(a => a.Books)
                        .HasForeignKey(b => b.AuthorId);
                });
            }

    Best Practice
    Use data annotations for simple things like [Required], [MaxLength], [Key]

    Use Fluent API for anything complex, or if you want to keep configuration separate from your models


Circular Reference
=================================
Happens when two or more objects reference each other, creating a loop.
In Entity Framework (and in programming in general), this can cause problems like:
    - Endless loops when serializing (e.g., to JSON)
    - Stack overflows
    - Confusing navigation and logic

    e.g
        public class Author
        {
            public int Id { get; set; }
            public string Name { get; set; }

            public ICollection<Book> Books { get; set; }
        }

        public class Book
        {
            public int Id { get; set; }
            public string Title { get; set; }

            public Author Author { get; set; }
        }

        Here’s the circular reference:
            - Author has a list of Books
            - Each Book has an Author
            SO => Author → Book → Author → Book → ...

How to solve it 
    - Use [JsonIgnore]  + using System.Text.Json.Serialization;
    - Use DTOs (Data Transfer Objects)
    - Configure serializer to handle loops


Change Tracking
=================================
The feature that lets EF Core automatically keep track of changes you make to your entity objects after they are loaded from the database.

`context.SaveChanges();` is what actually sends SQL commands to the database (INSERT, UPDATE, DELETE).
Change tracking just helps prepare for that.

Options for Change tracking:
    1. Default: Automatic tracking
    2. No tracking (read-only):
        context.Pizzas.AsNoTracking();
    Use this for performance when you don’t plan to update the data.
    3. Manual change detection:
        context.ChangeTracker.DetectChanges();

Whether you're using automatic or manual change tracking in Entity Framework Core, you must always call SaveChanges.


So what does tracking do under the hood?
    When tracking is enabled: (default)
        - EF stores a copy of each loaded object in the Change Tracker (like a hidden dictionary)
        - Every time you modify the object, EF marks it as Modified, Added, or Deleted
        - When SaveChanges() is called, EF:
            - Checks what entities were modified
            - Builds SQL commands accordingly
            - Executes them in the correct order

    When .AsNoTracking() is used:
        - EF just loads the data and gives it to you.
        - No hidden copy is stored.
        - No change detection is done.

When to use what?
    You plan to modify/save data - Use default (tracking)
    You just want to display/read data - Use AsNoTracking() for better performance



EF Core Project Structure – Console vs Web
===================================================

1. Folder Descriptions and Responsibility:

Folder/File           Purpose                                                             Created By
-------------         ------------------------------------------------------------------  -----------
Program.cs            Entry point of the app. Main logic or web setup.                   Developer
Controllers/          Handles HTTP requests and routes (for Web Apps).                   Developer
Data/                 Contains the DbContext class. Central EF Core DB access.           Developer
Migrations/           Tracks schema changes using generated C# files.                    EF Core
Models/               Entity classes representing DB tables.                             Developer / Scaffold
Services/             Business logic abstraction over DbContext.                         Developer
Properties/           launchSettings.json for config profiles (Web).                     Visual Studio
db/                   Optional folder for .db SQLite file or backups.                    Developer

Connections between files:
Controllers --> Services --> DbContext (in Data/)
Models <--> used by all layers (Controllers, Services, DbContext)
Migrations <-- generated from --> DbContext

------------------------------------------------------------

2. Console App Project Structure (Simple EF Core)

BookLibraryApp/
    Program.cs
    Models/             # Book.cs, Author.cs, etc.
    Data/               # LibraryContext.cs
    Migrations/         # EF-generated migration files
    db/                 # Optional .db file for SQLite

- Program.cs holds the logic.
- No Controllers or Services are strictly needed.
- Good for learning or automation scripts.

------------------------------------------------------------

3. Web App (ASP.NET Core) Project Structure

BookLibraryWeb/
    Program.cs
    Startup.cs          # Optional, used to configure services and middleware
    Controllers/        # BooksController.cs, etc.
    Services/           # BookService.cs, etc.
    Data/               # LibraryContext.cs
    Models/             # Book.cs, Author.cs, etc.
    Migrations/         # EF-generated files
    Views/              # (Only if using MVC or Razor pages)
    Properties/         # launchSettings.json

- Used for web APIs or MVC apps.
- Controllers handle requests and route them to services.
- DbContext is injected via DI and used in services.

------------------------------------------------------------

4. Console vs Web – Summary Table

Feature                  Console App           Web App (ASP.NET Core)
----------------------   -------------------   ---------------------------
Entry Point              Program.cs            Program.cs, Startup.cs
UI                       Console I/O           HTTP (API or Views)
Uses Controllers?        No                    Yes
Uses Services Layer?     Optional              Recommended
Views Folder             No                    Yes (if using MVC)

----

DbSet<T>
================

What does _context.Books represent in C# (EF Core)?
    _context.Books is a DbSet<Book> — it represents a table in your database mapped to a C# entity class.

    It gives you a way to:
        🔍 Query data (SELECT)
        ➕ Add new books (INSERT)
        ✏️ Update books (UPDATE)
        ❌ Delete books (DELETE)

🔧 Common methods you can use on _context.Books
Reading (queries)
| Method                            | Description                        |
| --------------------------------- | ---------------------------------- |
| `.ToList()`                       | Materializes all records as a list |
| `.First()`, `.FirstOrDefault()`   | Gets the first matching item       |
| `.Single()`, `.SingleOrDefault()` | Gets a single unique matching item |
| `.Find(key)`                      | Finds by primary key (fast)        |
| `.Where(condition)`               | Filters based on condition         |
| `.Include(navProperty)`           | Eager-load related data (joins)    |
| `.AsNoTracking()`                 | Better performance when read-only  |
| `.OrderBy()`, `.ThenBy()`         | Sort results                       |
| `.Take(n)`, `.Skip(n)`            | Paging                             |
| `.Count()`, `.Any()`              | Aggregates                         |


Adding
| Method          | Description            |
| --------------- | ---------------------- |
| `Add(entity)`   | Adds one entity        |
| `AddRange(...)` | Adds multiple entities |


Updating
| Method                 | Description                               |
| ---------------------- | ----------------------------------------- |
| Modify entity directly | EF tracks changes automatically           |
| `Update(entity)`       | Marks entity as modified (if not tracked) |

    book.Title = "New Title";
    _context.Books.Update(book);  // optional if already tracked

Deleting
| Method             | Description               |
| ------------------ | ------------------------- |
| `Remove(entity)`   | Deletes a single entity   |
| `RemoveRange(...)` | Deletes multiple entities |


Utility & Helpers
| Method / Pattern                | Purpose                           |
| ------------------------------- | --------------------------------- |
| `.Attach(entity)`               | Attach entity without fetching it |
| `.Entry(entity).State`          | Manually control entity state     |
| `context.ChangeTracker.Clear()` | Detach all tracked entities       |
| `.Local`                        | Access in-memory tracked entities |

Under The Hood
| Concept          | Meaning                                         |
| ---------------- | ----------------------------------------------- |
| `DbSet<T>`       | Represents a table of type `T`. Acts like a collection (List<T>) but it's backed by the db.                  |
| Tracked Entity   | EF Core watches for changes to auto-save        |
| Untracked Entity | EF ignores changes (useful for read-only views) |

Best Practices
| Practice                                  | Why                               |
| ----------------------------------------- | --------------------------------- |
| Use `.AsNoTracking()` for read-only       | Faster, no change tracking needed |
| Avoid fetching large datasets all at once | Use paging (`Skip`, `Take`)       |
| Prefer `Find()` when searching by ID      | Uses fast key lookup              |